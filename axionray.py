# -*- coding: utf-8 -*-
"""AxionRay

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Nov6_aqgofJOk23nxYikeEnzEt7bCzRe
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

df = pd.read_excel("/content/Analyst Assignment_Task_DataSheet..xlsx")

import pandas as pd
file_path = '/content/Analyst Assignment_Task_DataSheet..xlsx' # Load the Excel file
excel_data = pd.ExcelFile(file_path)

excel_data.sheet_names

df.describe()

# Task_1 Taxonomy sheets
task_1_data = pd.read_excel("/content/Analyst Assignment_Task_DataSheet..xlsx", sheet_name='Task 1')
task_1_taxonomy = pd.read_excel("/content/Analyst Assignment_Task_DataSheet..xlsx", sheet_name='Task_1 Taxonomy')

# Display 10 rows
task_1_data.head(10), task_1_taxonomy.head(10)

# Task_2 Taxonomy sheets
task_2_data = pd.read_excel("/content/Analyst Assignment_Task_DataSheet..xlsx", sheet_name='Task 2')
task_2_taxonomy = pd.read_excel("/content/Analyst Assignment_Task_DataSheet..xlsx", sheet_name='Task_2 Taxonomy')

# Display 10 rows
task_2_data.head(10), task_2_taxonomy.head(10)

# Task 3_Raw Data and Data Validation Template sheets
task_3_raw_data = pd.read_excel("/content/Analyst Assignment_Task_DataSheet..xlsx", sheet_name='Task 3_Raw Data')
data_validation_template = pd.read_excel("/content/Analyst Assignment_Task_DataSheet..xlsx", sheet_name='Data Validation_ Template (Task')

# Display 10 rows
task_3_raw_data.head(), data_validation_template.head()

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Load data
file_path = '/content/Analyst Assignment_Task_DataSheet..xlsx'
task_1_data = pd.read_excel(file_path, sheet_name='Task 1')

# Sentiment Analysis
sentiment_counts = task_1_data['Sentiment 1'].value_counts()
plt.figure(figsize=(10, 6))
sns.barplot(x=sentiment_counts.index, y=sentiment_counts.values, palette='viridis')
plt.title('Sentiment Distribution')
plt.xlabel('Sentiment')
plt.ylabel('Count')
plt.xticks(rotation=45)
plt.show()

# Frequent Symptoms
symptom_counts = task_1_data['Symtom Condition 1'].value_counts()
plt.figure(figsize=(10, 6))
sns.barplot(x=symptom_counts.index, y=symptom_counts.values, palette='coolwarm')
plt.title('Most Common Symptoms')
plt.xlabel('Symptom Condition')
plt.ylabel('Count')
plt.xticks(rotation=45)
plt.show()

print(task_1_data.columns)

# Load data
task_2_data = pd.read_excel("/content/Analyst Assignment_Task_DataSheet..xlsx", sheet_name='Task 2')

# Failure Conditions
failure_counts = task_2_data['Failure Condition 1'].value_counts()
plt.figure(figsize=(10, 6))
sns.barplot(x=failure_counts.index, y=failure_counts.values, palette='Blues')
plt.title('Most Frequent Failure Conditions')
plt.xlabel('Failure Condition')
plt.ylabel('Count')
plt.xticks(rotation=45)
plt.show()

# Fix Components
fix_counts = task_2_data['Fix Component 1'].value_counts()
plt.figure(figsize=(10, 6))
sns.barplot(x=fix_counts.index, y=fix_counts.values, palette='Greens')
plt.title('Most Common Fix Components')
plt.xlabel('Fix Component')
plt.ylabel('Count')
plt.xticks(rotation=45)
plt.show()

# Load raw data for validation
task_3_raw_data = pd.read_excel("/content/Analyst Assignment_Task_DataSheet..xlsx", sheet_name='Task 3_Raw Data')

# Unique Values per Column
unique_values = task_3_raw_data.nunique()

# Visualize Unique Values
plt.figure(figsize=(12, 6))
sns.barplot(x=unique_values.index, y=unique_values.values, palette='magma')
plt.title('Unique Values per Column')
plt.xlabel('Columns')
plt.ylabel('Unique Values')
plt.xticks(rotation=90)
plt.show()

# Missing Data
missing_data = task_3_raw_data.isnull().sum()
plt.figure(figsize=(12, 6))
sns.barplot(x=missing_data.index, y=missing_data.values, palette='rocket')
plt.title('Missing Values per Column')
plt.xlabel('Columns')
plt.ylabel('Missing Values')
plt.xticks(rotation=90)
plt.show()